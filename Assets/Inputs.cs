//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""dfa103ed-0656-4250-b6a7-9c2a930f6e4c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9ca3eb83-fa3c-48b6-a304-154582530f5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CW Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""92af4ca1-657d-43d0-a579-73bf843a222b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CCW Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""b13fb57b-f39b-4456-b1db-f2633cc588ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CW2 Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""2499f333-8a1b-4a85-b260-db9d373519e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CCW2 Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""21861c58-96bf-4680-86eb-e28c2cf462c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UD Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""bccbab8c-b079-4fe3-a8be-7302f90758af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UD2 Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""178110f5-3c30-4c77-83fe-4f17401c9e54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6ea52627-e6f4-4677-b6b1-910f30599547"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b94ba5a8-8730-490c-8b36-b8d66685459e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c3c336fa-44aa-49cb-972a-36d41c6d81d8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11358a85-234b-4e09-bb9e-4eeb8a044e31"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b933811a-918c-42e0-8584-676669b8efd7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""63bb33ba-0a43-4dd2-93a3-33f49bc40689"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e4d72c95-d304-468d-b6f5-ee35cda6293d"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f747db30-f0d5-4ee4-b530-9b89c65c9616"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2a13c6f3-4420-4d8f-a332-876e79cfbba4"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bbaaf7fb-b2e7-4944-a94c-7fc145dc6fb7"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bd85ff01-909e-4be7-a7b0-20b510a21e56"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CW Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d450917-c444-4cba-a8b1-6c68eadfe016"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CCW Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dfa3e13-8261-4c25-85a2-791a36b18ae2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CW2 Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2dc4438-59b6-44a8-9e38-0919d20b0e2a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CCW2 Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e057c59-5d69-4b68-b830-4e1be27f2213"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UD Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49513ab6-1973-437e-8a8b-218fbc1e0cca"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UD2 Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Movement = m_Main.FindAction("Movement", throwIfNotFound: true);
        m_Main_CWRotation = m_Main.FindAction("CW Rotation", throwIfNotFound: true);
        m_Main_CCWRotation = m_Main.FindAction("CCW Rotation", throwIfNotFound: true);
        m_Main_CW2Rotation = m_Main.FindAction("CW2 Rotation", throwIfNotFound: true);
        m_Main_CCW2Rotation = m_Main.FindAction("CCW2 Rotation", throwIfNotFound: true);
        m_Main_UDRotation = m_Main.FindAction("UD Rotation", throwIfNotFound: true);
        m_Main_UD2Rotation = m_Main.FindAction("UD2 Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Movement;
    private readonly InputAction m_Main_CWRotation;
    private readonly InputAction m_Main_CCWRotation;
    private readonly InputAction m_Main_CW2Rotation;
    private readonly InputAction m_Main_CCW2Rotation;
    private readonly InputAction m_Main_UDRotation;
    private readonly InputAction m_Main_UD2Rotation;
    public struct MainActions
    {
        private @Inputs m_Wrapper;
        public MainActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Main_Movement;
        public InputAction @CWRotation => m_Wrapper.m_Main_CWRotation;
        public InputAction @CCWRotation => m_Wrapper.m_Main_CCWRotation;
        public InputAction @CW2Rotation => m_Wrapper.m_Main_CW2Rotation;
        public InputAction @CCW2Rotation => m_Wrapper.m_Main_CCW2Rotation;
        public InputAction @UDRotation => m_Wrapper.m_Main_UDRotation;
        public InputAction @UD2Rotation => m_Wrapper.m_Main_UD2Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMovement;
                @CWRotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCWRotation;
                @CWRotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCWRotation;
                @CWRotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCWRotation;
                @CCWRotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCCWRotation;
                @CCWRotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCCWRotation;
                @CCWRotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCCWRotation;
                @CW2Rotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCW2Rotation;
                @CW2Rotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCW2Rotation;
                @CW2Rotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCW2Rotation;
                @CCW2Rotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCCW2Rotation;
                @CCW2Rotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCCW2Rotation;
                @CCW2Rotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCCW2Rotation;
                @UDRotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnUDRotation;
                @UDRotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnUDRotation;
                @UDRotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnUDRotation;
                @UD2Rotation.started -= m_Wrapper.m_MainActionsCallbackInterface.OnUD2Rotation;
                @UD2Rotation.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnUD2Rotation;
                @UD2Rotation.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnUD2Rotation;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @CWRotation.started += instance.OnCWRotation;
                @CWRotation.performed += instance.OnCWRotation;
                @CWRotation.canceled += instance.OnCWRotation;
                @CCWRotation.started += instance.OnCCWRotation;
                @CCWRotation.performed += instance.OnCCWRotation;
                @CCWRotation.canceled += instance.OnCCWRotation;
                @CW2Rotation.started += instance.OnCW2Rotation;
                @CW2Rotation.performed += instance.OnCW2Rotation;
                @CW2Rotation.canceled += instance.OnCW2Rotation;
                @CCW2Rotation.started += instance.OnCCW2Rotation;
                @CCW2Rotation.performed += instance.OnCCW2Rotation;
                @CCW2Rotation.canceled += instance.OnCCW2Rotation;
                @UDRotation.started += instance.OnUDRotation;
                @UDRotation.performed += instance.OnUDRotation;
                @UDRotation.canceled += instance.OnUDRotation;
                @UD2Rotation.started += instance.OnUD2Rotation;
                @UD2Rotation.performed += instance.OnUD2Rotation;
                @UD2Rotation.canceled += instance.OnUD2Rotation;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCWRotation(InputAction.CallbackContext context);
        void OnCCWRotation(InputAction.CallbackContext context);
        void OnCW2Rotation(InputAction.CallbackContext context);
        void OnCCW2Rotation(InputAction.CallbackContext context);
        void OnUDRotation(InputAction.CallbackContext context);
        void OnUD2Rotation(InputAction.CallbackContext context);
    }
}
